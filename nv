private fun rawImagetoHardwareBufferFromatCheckHelper(
    cameraIdList: Array<String>,
    format: Int
) {
    val camera = Camera2Basic(cameraIdList)

    activityRule.scenario.onActivity { activity ->
        // ✅ Step 1: Get Supported Output Sizes for YUV_420_888
        val cameraManager = activity.getSystemService(Context.CAMERA_SERVICE) as CameraManager
        val characteristics = cameraManager.getCameraCharacteristics(cameraIdList[0])

        val streamConfigMap = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP)
        val outputSizes = streamConfigMap?.getOutputSizes(ImageFormat.YUV_420_888)

        if (outputSizes.isNullOrEmpty()) {
            Log.e("Camera", "No supported output sizes for YUV_420_888")
            return@onActivity
        }

        // ✅ Step 2: Choose a Valid Size (largest available)
        val largestSize = outputSizes.maxByOrNull { it.width * it.height } ?: Size(640, 480)
        val width = largestSize.width
        val height = largestSize.height

        Log.d("Camera", "Using resolution: ${width}x${height}")

        // ✅ Step 3: Create ImageReader with Correct Size
        val maxImages = 2
        val imageReader = ImageReader.newInstance(width, height, format, maxImages)

        // ✅ Step 4: Create and Start HandlerThread
        val imageReaderThread = HandlerThread("ImageReaderThread").apply { start() }
        val imageReaderHandler = Handler(imageReaderThread.looper)

        // ✅ Step 5: Set Image Available Listener BEFORE starting preview
        imageReader.setOnImageAvailableListener({ reader ->
            val image = reader.acquireLatestImage()
            if (image != null) {
                val hwbuffer = image.hardwareBuffer
                Log.d("ImageReader", "Image acquired, HardwareBuffer: $hwbuffer")

                image.close() // ✅ Always close the image after processing
            } else {
                Log.e("ImageReader", "No image received")
            }
        }, imageReaderHandler)

        // ✅ Step 6: Configure Camera with Correct Surface
        activity.runOnUiThread {
            camera.configure(viewSurface = imageReader.surface) // Use correct size
            camera.startPreview()
        }

        // ✅ Step 7: Wait for Image with Timeout
        runBlocking {
            withTimeout(5000L) {
                delay(1000L) // Allow time for images to arrive
            }
        }

        // ✅ Step 8: Stop Preview and Cleanup
        camera.stopPreview()
        imageReaderThread.quitSafely()
    }
}

