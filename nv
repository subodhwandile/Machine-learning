@Test
fun rawImagetoHardwareBufferFromatCheck() {
    rawImagetoHardwareBufferFromatCheckHelper(arrayOf("0"), ImageFormat.YUV_420_888)
}

private fun rawImagetoHardwareBufferFromatCheckHelper(
    cameraIdList: Array<String>,
    format: Int
) {
    val camera = Camera2Basic(cameraIdList)

    activityRule.scenario.onActivity { activity ->
        camera.previewSize.run {
            activity.changePreviewSurfaceSize(width, height)
        }

        // ✅ Step 1: Increase ImageReader Resolution
        val width = 640
        val height = 480
        val maxImages = 2 // Buffer size

        val imageReader = ImageReader.newInstance(width, height, format, maxImages)

        // ✅ Step 2: Create and Start HandlerThread
        val imageReaderThread = HandlerThread("ImageReaderThread").apply { start() }
        val imageReaderHandler = Handler(imageReaderThread.looper)

        // ✅ Step 3: Set Image Available Listener BEFORE starting preview
        imageReader.setOnImageAvailableListener({ reader ->
            val image = reader.acquireLatestImage()
            if (image != null) {
                val hwbuffer = image.hardwareBuffer
                Log.d("ImageReader", "Image acquired, HardwareBuffer: $hwbuffer")

                if (hwbuffer != null) {
                    val srcBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)

                    for (x in 0 until width) {
                        for (y in 0 until height) {
                            val color = 0xFFFF0000.toInt()
                            srcBitmap.setPixel(x, y, color)
                        }
                    }

                    copyFromBitmap(hwbuffer, srcBitmap)
                }

                image.close() // ✅ Always close the image after processing
            } else {
                Log.e("ImageReader", "No image received")
            }
        }, imageReaderHandler) // ✅ Pass a valid handler

        // ✅ Step 4: Start Camera Preview
        activity.runOnUiThread {
            camera.configure(viewSurface = imageReader.surface)
            camera.startPreview()
        }

        // ✅ Step 5: Timeout Handling (Wait for image)
        runBlocking {
            withTimeout(5000L) {
                delay(1000L) // Allow time for images to arrive
            }
        }

        // ✅ Step 6: Stop Preview and Cleanup
        camera.stopPreview()
        imageReaderThread.quitSafely()
    }
}
